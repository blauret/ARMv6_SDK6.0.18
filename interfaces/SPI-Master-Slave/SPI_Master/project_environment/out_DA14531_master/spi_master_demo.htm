<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out_DA14531_master\spi_master_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out_DA14531_master\spi_master_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Feb 21 11:25:03 2023
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; system_init &rArr; periph_init &rArr; spi_initialize &rArr; dma_initialize
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_Handler</a><BR>
 <LI><a href="#[22]">HardFault_HandlerC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_HandlerC</a><BR>
 <LI><a href="#[21]">NMI_HandlerC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">NMI_HandlerC</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[e]">BLE_RF_DIAG_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[19]">DMA_Handler</a> from dma.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[10]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[11]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[12]">GPIO2_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[13]">GPIO3_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[14]">GPIO4_Handler</a> from gpio.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[22]">HardFault_HandlerC</a> from exceptions.o(.text) referenced from startup_da14531.o(.text)
 <LI><a href="#[a]">I2C_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[d]">KEYBRD_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[21]">NMI_HandlerC</a> from exceptions.o(.text) referenced from startup_da14531.o(.text)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1b]">RESERVED21_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1c]">RESERVED22_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1d]">RESERVED23_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[f]">RFCAL_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[18]">RTC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[b]">SPI_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[17]">SWTIM1_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[15]">SWTIM_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_da14531.o(system_DA14xxx) referenced from startup_da14531.o(.text)
 <LI><a href="#[9]">UART2_Handler</a> from uart.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[8]">UART_Handler</a> from uart.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[16]">WKUP_QUADEC_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[1a]">XTAL32M_RDY_Handler</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_da14531.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">rwble_isr</a> from startup_da14531.o(.text) referenced from startup_da14531.o(RESET)
 <LI><a href="#[25]">spi_dma_receive_cb</a> from spi_531.o(.text) referenced from spi_531.o(.text)
 <LI><a href="#[24]">spi_dma_send_cb</a> from spi_531.o(.text) referenced from spi_531.o(.text)
 <LI><a href="#[23]">spi_dma_transfer_cb</a> from spi_531.o(.text) referenced from spi_531.o(.text)
 <LI><a href="#[26]">spi_transfer_user_callback</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[62]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[63]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[64]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[65]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[66]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BLE_RF_DIAG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RESERVED21_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RESERVED22_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RESERVED23_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SWTIM1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SWTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>XTAL32M_RDY_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>rwble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>HardFault_HandlerC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>NMI_HandlerC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exceptions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_HandlerC
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_HandlerC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>syscntl_use_lowest_amba_clocks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>syscntl_use_highest_amba_clocks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>syscntl_cfg_xtal32m_amp_reg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>syscntl_por_vbat_high_cfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>syscntl_por_vbat_low_cfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>syscntl_dcdc_get_level</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, syscntl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog_and_verify
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_word_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_word_prog_and_verify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_init
</UL>

<P><STRONG><a name="[4e]"></a>syscntl_dcdc_set_level</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, syscntl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscntl_dcdc_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog_and_verify
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_word_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_word_prog_and_verify
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_disable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
</UL>

<P><STRONG><a name="[29]"></a>syscntl_dcdc_turn_off</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, syscntl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_is_dcdc_reserved
</UL>

<P><STRONG><a name="[2b]"></a>syscntl_dcdc_turn_on_in_boost</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, syscntl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscntl_dcdc_turn_on_in_boost
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_is_dcdc_reserved
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[6c]"></a>syscntl_dcdc_turn_on_in_buck</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, syscntl.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>GPIO_GetPinFunction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_functions
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_SetActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>GPIO_SetInactive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>GPIO_ConfigurePinPower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GPIO_GetPinStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>GPIO_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>GPIO_EnableIRQ</STRONG> (Thumb, 364 bytes, Stack size 36 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>GPIO_GetIRQInputLevel</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>GPIO_SetIRQInputLevel</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>GPIO_RegisterCallback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GPIOn_Handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIO0_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO1_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIO2_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIO3_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIO4_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIO_EnablePorPin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>GPIO_DisablePorPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>GPIO_SetPorTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>GPIO_GetPorTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>DMA_Handler</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>dma_initialize</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_initialize
</UL>

<P><STRONG><a name="[3b]"></a>dma_register_callback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_receive
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[3c]"></a>dma_channel_start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_receive
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[7e]"></a>dma_channel_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>dma_channel_cancel</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>dma_channel_active</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>UART_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Handler &rArr; uart_intr_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART2_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_Handler &rArr; uart_intr_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_intr_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>uart_enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>uart_disable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>uart_baudrate_setf</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>uart_register_tx_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>uart_register_rx_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>uart_register_err_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>uart_initialize</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[2d]"></a>uart_write_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
</UL>

<P><STRONG><a name="[87]"></a>uart_write_buffer</STRONG> (Thumb, 274 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>uart_send</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[2e]"></a>uart_wait_tx_finish</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_tx_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_tx_finish
</UL>

<P><STRONG><a name="[2f]"></a>uart_read_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_byte
</UL>

<P><STRONG><a name="[88]"></a>uart_read_buffer</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>uart_receive</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>uart_enable_flow_control</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>uart_disable_flow_control</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>itoa</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, uart_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[34]"></a>printf_byte</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = printf_byte &rArr; uart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer_user_callback
</UL>

<P><STRONG><a name="[36]"></a>printf_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = printf_string &rArr; uart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer_user_callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>print_hword</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, uart_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[38]"></a>print_word</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, uart_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[39]"></a>printf_byte_dec</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, uart_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[8c]"></a>spi_wait_dma_write_to_finish</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>spi_wait_dma_read_to_finish</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>spi_master_transfer</STRONG> (Thumb, 1334 bytes, Stack size 48 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>

<P><STRONG><a name="[3d]"></a>spi_set_speed</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spi_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>

<P><STRONG><a name="[8e]"></a>spi_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>spi_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>spi_set_cp_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>spi_set_bitmode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>spi_set_cs_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>spi_register_send_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>spi_register_receive_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>spi_register_transfer_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>spi_initialize</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = spi_initialize &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[5a]"></a>spi_cs_low</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>spi_cs_high</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer_user_callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>spi_send</STRONG> (Thumb, 1128 bytes, Stack size 24 bytes, spi_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_register_callback
</UL>

<P><STRONG><a name="[41]"></a>spi_receive</STRONG> (Thumb, 1064 bytes, Stack size 48 bytes, spi_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_register_callback
</UL>

<P><STRONG><a name="[42]"></a>spi_transfer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_transfer &rArr; spi_master_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>spi_access</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>spi_transaction</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, spi_531.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>arch_set_pxact_gpio</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>set_xtal32m_trim_value</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>system_init</STRONG> (Thumb, 1048 bytes, Stack size 48 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = system_init &rArr; periph_init &rArr; spi_initialize &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_disable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_get_xtal32m_trim_value
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sb_read_otp_header (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_enter_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_indication (Weak Reference)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>hw_otpc_is_dcdc_reserved</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_otpc_531.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_off
</UL>

<P><STRONG><a name="[99]"></a>hw_otpc_clear_dcdc_reserved</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_otpc_531.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>hw_otpc_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_otpc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[9a]"></a>hw_otpc_set_speed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_otpc_531.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>hw_otpc_enter_mode</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_otpc_enter_mode &rArr; syscntl_dcdc_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4f]"></a>hw_otpc_word_prog_and_verify</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, hw_otpc_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>

<P><STRONG><a name="[50]"></a>hw_otpc_word_read</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hw_otpc_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>

<P><STRONG><a name="[51]"></a>hw_otpc_prog</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, hw_otpc_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog_and_verify
</UL>

<P><STRONG><a name="[52]"></a>hw_otpc_prog_and_verify</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, hw_otpc_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_otpc_prog
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>

<P><STRONG><a name="[53]"></a>hw_otpc_read</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, hw_otpc_531.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_get_level
</UL>

<P><STRONG><a name="[4b]"></a>hw_otpc_disable</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hw_otpc_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hw_otpc_disable &rArr; syscntl_dcdc_set_level
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[49]"></a>otp_cs_store</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, otp_cs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = otp_cs_store
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sb_set_debugger_mode (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[56]"></a>otp_cs_load_pd_rad</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, otp_cs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_pa_pwr_get (Weak Reference)
</UL>

<P><STRONG><a name="[58]"></a>otp_cs_load_pd_adpll</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, otp_cs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_pa_pwr_get (Weak Reference)
</UL>

<P><STRONG><a name="[9b]"></a>otp_cs_get_low_power_clock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>otp_cs_get_adc_single_ge</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>otp_cs_get_adc_single_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>otp_cs_get_adc_diff_ge</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>otp_cs_get_adc_diff_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>otp_cs_get_adc_trim_val</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>otp_cs_get_adc_offsh_ge</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>otp_cs_get_adc_offsh_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>otp_cs_get_adc_25_cal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>otp_cs_get_xtal32m_trim_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[a4]"></a>otp_cs_get_xtal_wait_trim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otp_cs.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = main &rArr; system_init &rArr; periph_init &rArr; spi_initialize &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_register_transfer_cb
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[26]"></a>spi_transfer_user_callback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = spi_transfer_user_callback &rArr; printf_byte &rArr; uart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>set_pad_functions</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, user_periph_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[4c]"></a>periph_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, user_periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = periph_init &rArr; spi_initialize &rArr; dma_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_initialize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_initialize
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscntl_dcdc_turn_on_in_boost
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[5c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer_user_callback
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_initialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_speed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte_dec
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, system_da14531.o(system_DA14xxx))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_da14531.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_da14531.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>uart_intr_hndl</STRONG> (Thumb, 536 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_intr_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[23]"></a>spi_dma_transfer_cb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_dma_transfer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_531.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>spi_dma_send_cb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_dma_send_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_531.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>spi_dma_receive_cb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_531.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_dma_receive_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_531.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>reset_indication</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[57]"></a>rf_pa_pwr_get</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_load_pd_adpll
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_load_pd_rad
</UL>

<P><STRONG><a name="[48]"></a>sb_read_otp_header</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[54]"></a>sb_set_debugger_mode</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_cs_store
</UL>
<HR></body></html>
